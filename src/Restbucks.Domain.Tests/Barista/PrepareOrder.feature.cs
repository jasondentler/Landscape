// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Restbucks.Barista
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Prepare orders")]
    public partial class PrepareOrdersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PrepareOrder.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Prepare orders", "In order to sell to customers\r\nAs a barista\r\nI want prepare orders", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Begin preparing an order")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void BeginPreparingAnOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Begin preparing an order", new string[] {
                        "domain"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the franchise owner has set up the menu");
#line 9
 testRunner.And("an order has been queued for the barista");
#line 10
 testRunner.When("I begin preparing the order");
#line 11
 testRunner.Then("the order is being prepared");
#line 12
 testRunner.And("nothing else happens");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Begin preparing an order that\'s already being prepared")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void BeginPreparingAnOrderThatSAlreadyBeingPrepared()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Begin preparing an order that\'s already being prepared", new string[] {
                        "domain"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("the franchise owner has set up the menu");
#line 17
 testRunner.And("an order has been queued for the barista");
#line 18
 testRunner.And("I have started preparing the order");
#line 19
 testRunner.When("I begin preparing the order");
#line 20
 testRunner.Then("the aggregate state is invalid");
#line 21
 testRunner.And("the error is \"This order is already being prepared.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Begin preparing an order that\'s already prepared")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void BeginPreparingAnOrderThatSAlreadyPrepared()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Begin preparing an order that\'s already prepared", new string[] {
                        "domain"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("the franchise owner has set up the menu");
#line 26
 testRunner.And("an order has been queued for the barista");
#line 27
 testRunner.And("I have started preparing the order");
#line 28
 testRunner.And("I have prepared the order");
#line 29
 testRunner.When("I begin preparing the order");
#line 30
 testRunner.Then("the aggregate state is invalid");
#line 31
 testRunner.And("the error is \"This order is already prepared.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Finish preparing the order")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void FinishPreparingTheOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Finish preparing the order", new string[] {
                        "domain"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("the franchise owner has set up the menu");
#line 36
 testRunner.And("an order has been queued for the barista");
#line 37
 testRunner.And("I have started preparing the order");
#line 38
 testRunner.When("I finish preparing the order");
#line 39
 testRunner.Then("the order is prepared");
#line 40
 testRunner.And("nothing else happens");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Finish preparing a queued order")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void FinishPreparingAQueuedOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Finish preparing a queued order", new string[] {
                        "domain"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("the franchise owner has set up the menu");
#line 45
 testRunner.And("an order has been queued for the barista");
#line 46
 testRunner.When("I finish preparing the order");
#line 47
 testRunner.Then("the aggregate state is invalid");
#line 48
 testRunner.And("the error is \"You never started preparing this order.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Finish preparing a paid order")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void FinishPreparingAPaidOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Finish preparing a paid order", new string[] {
                        "domain"});
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.Given("the franchise owner has set up the menu");
#line 53
 testRunner.And("an order has been queued for the barista");
#line 54
 testRunner.And("I have started preparing the order");
#line 55
 testRunner.And("I have paid for the order");
#line 56
 testRunner.When("I finish preparing the order");
#line 57
 testRunner.Then("the order is prepared");
#line 58
 testRunner.And("the order is delivered");
#line 59
 testRunner.And("nothing else happens");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pay for a prepared order")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void PayForAPreparedOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pay for a prepared order", new string[] {
                        "domain"});
#line 62
this.ScenarioSetup(scenarioInfo);
#line 63
 testRunner.Given("the franchise owner has set up the menu");
#line 64
 testRunner.And("an order has been queued for the barista");
#line 65
 testRunner.And("I have started preparing the order");
#line 66
 testRunner.And("I have prepared the order");
#line 67
 testRunner.When("I pay with a credit card");
#line 68
 testRunner.Then("the order is paid for");
#line 69
 testRunner.And("the order is delivered");
#line 70
 testRunner.And("nothing else happens");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
