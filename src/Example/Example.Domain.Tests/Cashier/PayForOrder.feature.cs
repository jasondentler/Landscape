// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.431
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Example.Cashier
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Pay for order")]
    public partial class PayForOrderFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PayForOrder.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Pay for order", "In order to get my morning caffiene fix\r\nAs a customer\r\nI want to pay for my coff" +
                    "ee order", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pay for an order")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void PayForAnOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pay for an order", new string[] {
                        "domain"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("the manager has set up the menu");
#line 9
 testRunner.And("I have placed an order for a small latte, whole milk");
#line 10
 testRunner.When("I pay for the order");
#line 11
 testRunner.Then("the order is paid for");
#line 12
 testRunner.And("the cashier queues the order to the barista");
#line 13
 testRunner.And("the order is queued to the barista");
#line 14
 testRunner.And("nothing else happens");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pay for a cancelled order")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void PayForACancelledOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pay for a cancelled order", new string[] {
                        "domain"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("the manager has set up the menu");
#line 19
 testRunner.And("I have placed an order for a small latte, whole milk");
#line 20
 testRunner.And("I have cancelled the order");
#line 21
 testRunner.When("I pay for the order");
#line 22
 testRunner.Then("the aggregate state is invalid");
#line 23
 testRunner.And("the error is \"You can\'t pay for this order. It is cancelled. Place a new order.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pay for a paid order")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void PayForAPaidOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pay for a paid order", new string[] {
                        "domain"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("the manager has set up the menu");
#line 28
 testRunner.And("I have placed an order for a small latte, whole milk");
#line 29
 testRunner.And("I have paid for the order");
#line 30
 testRunner.When("I pay for the order");
#line 31
 testRunner.Then("the aggregate state is invalid");
#line 32
 testRunner.And("the error is \"You can\'t pay for this order. It\'s already paid.\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
