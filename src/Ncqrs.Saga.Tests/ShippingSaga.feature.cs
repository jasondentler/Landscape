// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.431
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Ncqrs.Saga
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Shipping Saga")]
    public partial class ShippingSagaFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ShippingSaga.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Shipping Saga", "In order to ship orders to customers\r\nAs a shipping manager\r\nI want to be told wh" +
                    "en an order is safe to ship", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dont ship an unpaid order")]
        [NUnit.Framework.CategoryAttribute("saga")]
        public virtual void DontShipAnUnpaidOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dont ship an unpaid order", new string[] {
                        "saga"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.When("the shipment is prepared");
#line 9
 testRunner.Then("nothing happens");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dont ship an unprepared order")]
        [NUnit.Framework.CategoryAttribute("saga")]
        public virtual void DontShipAnUnpreparedOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dont ship an unprepared order", new string[] {
                        "saga"});
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.When("the invoice is paid");
#line 14
 testRunner.Then("nothing happens");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pay, then prepare")]
        [NUnit.Framework.CategoryAttribute("saga")]
        public virtual void PayThenPrepare()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pay, then prepare", new string[] {
                        "saga"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("the shipment is prepared");
#line 19
 testRunner.When("the invoice is paid");
#line 20
 testRunner.Then("ship the order");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Prepare, then pay")]
        [NUnit.Framework.CategoryAttribute("saga")]
        public virtual void PrepareThenPay()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prepare, then pay", new string[] {
                        "saga"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("the invoice is paid");
#line 25
 testRunner.When("the shipment is prepared");
#line 26
 testRunner.Then("ship the order");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ship, then paid")]
        [NUnit.Framework.CategoryAttribute("saga")]
        public virtual void ShipThenPaid()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ship, then paid", new string[] {
                        "saga"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("the invoice is paid");
#line 31
 testRunner.And("the shipment is prepared");
#line 32
 testRunner.When("the invoice is paid");
#line 33
 testRunner.Then("nothing happens");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ship, then prepared")]
        [NUnit.Framework.CategoryAttribute("saga")]
        public virtual void ShipThenPrepared()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ship, then prepared", new string[] {
                        "saga"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("the invoice is paid");
#line 38
 testRunner.And("the shipment is prepared");
#line 39
 testRunner.When("the shipment is prepared");
#line 40
 testRunner.Then("nothing happens");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
